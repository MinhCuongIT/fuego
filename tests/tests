#! /bin/sh

# You'll need jq to run the tests
# set the GOOGLE_APPLICATION_CREDENTIALS
# set the FIREBASE_TOKEN (generate token using firebasecli)
# set a PROJECT_NAME to the firebase project you want to use

oneTimeSetUp() {
    TEST_COLLECTION=tests-`uuidgen`
}

tearDown() {
    firebase --token "$FIREBASE_TOKEN" --project "$PROJECT_NAME" firestore:delete -y -r $TEST_COLLECTION
}

testWriteAndReadDocument() {
    # Adding...
    expectedValue="string1"
    id=$(../fuego add ${TEST_COLLECTION} "{\"level1\": \"${expectedValue}\"}") || fail "Failed to add document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq ".level1")
    assertEquals "Failed to read added value" "\"${expectedValue}\"" "${result}"

    # And setting...
    expectedValue="string2"
    ../fuego set ${TEST_COLLECTION} ${id} "{\"level1\": \"${expectedValue}\"}" || fail "Failed to set document"
    result=$(../fuego get ${TEST_COLLECTION} ${id} | jq ".level1")
    assertEquals "Failed to read set value" "\"${expectedValue}\"" "${result}"
}

testQueryKeys(){
    # Query integer value on first level key
    id=$(../fuego add ${TEST_COLLECTION} "{\" \": 1, \"level1\": 1, \"level2root\": {\"number\": 1}}") || fail "Failed to add document"
    result=$(../fuego query ${TEST_COLLECTION} "level1 == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on first level key" "\"${id}\"" "$result"
    
    # Query integer value on second level key
    result=$(../fuego query ${TEST_COLLECTION} "level2root.number == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on second level key" "\"${id}\"" "$result"
    # Query integer on empty key using string as key
    result=$(../fuego query ${TEST_COLLECTION} "\" \" == 1" | jq ".[0].ID")
    assertEquals "Failed to query value on empty key" "\"${id}\"" "$result"
}

testQueryWithSelect(){
    ../fuego add ${TEST_COLLECTION} "{\"p1\": 1, \"p2\": {\"number\": 1, \"string\":\"blah\"}}"
    result=$(../fuego query --select p1 --select p2.number ${TEST_COLLECTION} "p1 == 1" | jq -c ".[0].Data")
    assertEquals "Failed to select properties" "${result}" "{\"p1\":1,\"p2\":{\"number\":1}}"
}

testQueryDifferentValueTypes(){
    # Query integer value
    id=$(../fuego add --ts ${TEST_COLLECTION} "{\"number\": 1, \"timestamp\": \"2019-02-26T02:39:44.458Z\", \"string\": \"string1\", \"bool\": true}") || fail "Failed to add document"

    result=$(../fuego query ${TEST_COLLECTION} "number == 1" | jq ".[0].ID")
    assertEquals "Failed to query integer on value" "\"${id}\"" "$result"

    # Add and query timestamp
    result=$(../fuego query ${TEST_COLLECTION} "timestamp == 2019-02-26T02:39:44.458Z" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

    # query string double quote
    result=$(../fuego query ${TEST_COLLECTION} "string == \"string1\"" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"

    # query string single quote
    result=$(../fuego query ${TEST_COLLECTION} "bool == true" | jq ".[0].ID")
    assertEquals "Failed to query timestamp" "\"${id}\"" "$result"
}


testQueryInequality(){
    # query bigger than
    for i in $(seq 1 3); do
        ../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": $i}}"
    done

    result=$(../fuego query ${TEST_COLLECTION} "level1.level2 > 2" | jq "length")
    assertEquals "Failed to query >" "1" "$result"

    # less than or equal
    result=$(../fuego query ${TEST_COLLECTION} "level1.level2 <= 2" | jq "length")
    assertEquals "Failed to query <=" "2" "$result"
}

testCompoundQuery(){
    id=$(../fuego add ${TEST_COLLECTION} "{\"key1\": \"key1\", \"key2\": 2}") || fail "Failed to add document"
    id=$(../fuego add ${TEST_COLLECTION} "{\"key1\": \"whatever\", \"key2\": 2}") || fail "Failed to add document"

    # query first on a single field
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 2" | jq "length")
    assertEquals "Failed to query on a single key" "2" "$result"


    # query first on two fields
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 2" "key1 == \"key1\"" | jq "length")
    assertEquals "Failed to query on two keys" "1" "$result"

    # query on two fields, that fail
    result=$(../fuego query ${TEST_COLLECTION} "key2 == 1" "key1 == \"key1\"" | jq "length")
    assertEquals "Failed to query on two keys" "0" "$result"

}

testOrderAndPagination(){
    r1=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 1}}")
    r2=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 2}}")
    r3=$(../fuego add ${TEST_COLLECTION} "{\"level1\": {\"level2\": 3}}")

    # limit 1 result
    result=$(../fuego query --limit 1 ${TEST_COLLECTION}  | jq "length")
    assertEquals "Failed to set a limit" "1" "$result"

    # order ASC
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir ASC ${TEST_COLLECTION}  | jq ".[0].Data.level1.level2")
    assertEquals "Failed to order ASC" "1" "$result"

    # order DESC
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC ${TEST_COLLECTION}  | jq ".[0].Data.level1.level2")
    assertEquals "Failed to order DESC" "3" "$result"

    # Start at
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startat ${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r2\""

    # Start after
    result=$(../fuego query --limit 1 --orderby 'level1.level2' --orderdir DESC --startafter ${r2} ${TEST_COLLECTION}  | jq ".[0].ID")
    assertEquals "startat failed" "$result" "\"$r1\""

    # End at
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endat ${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endat failed" "2" "$result"

    # End before
    result=$(../fuego query --orderby 'level1.level2' --orderdir DESC --endbefore ${r2} ${TEST_COLLECTION}  | jq "length")
    assertEquals "endbefore failed" "1" "$result"
}


# Load shUnit2.
. ./shunit2
